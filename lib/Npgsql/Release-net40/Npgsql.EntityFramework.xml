<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Npgsql.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:Npgsql.NpgsqlConnectionFactory">
            <summary>
            Instances of this class are used to create DbConnection objects for Postgresql
            </summary>
        </member>
        <member name="M:Npgsql.NpgsqlConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection for Postgresql for the given connection string.
            </summary>
            <param name="nameOrConnectionString">The connection string.</param>
            <returns>An initialized DbConnection.</returns>
        </member>
        <member name="M:Npgsql.NpgsqlMigrationSqlGenerator.GetTableNameFromFullTableName(System.String)">
            <summary>
            Removes schema prefix e.g. "dto.Blogs" returns "Blogs" and "Posts" returns "Posts"
            </summary>
            <param name="tableName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Npgsql.SqlGenerators.SqlBaseGenerator.GetColumnsForJoin(Npgsql.SqlGenerators.JoinExpression,Npgsql.SqlGenerators.ProjectionExpression,Npgsql.SqlGenerators.VisitedExpression)">
            <summary>
            Given a join expression and a projection, fetch all columns in the projection
            that reference columns in the join.
            </summary>
        </member>
        <member name="M:Npgsql.SqlGenerators.SqlBaseGenerator.GetFromNames(Npgsql.SqlGenerators.InputExpression,System.Collections.Generic.List{System.String})">
            <summary>
            Given an InputExpression append all from names (including nested joins) to the list.
            </summary>
        </member>
        <member name="M:Npgsql.SqlGenerators.SqlBaseGenerator.GetReplacementColumn(Npgsql.SqlGenerators.JoinExpression,Npgsql.SqlGenerators.ColumnExpression)">
            <summary>
            Get new ColumnExpression that will be used in projection that had it's existing columns moved.
            These should be simple references to the inner column
            </summary>
        </member>
        <member name="M:Npgsql.SqlGenerators.SqlBaseGenerator.AdjustPropertyAccess(Npgsql.SqlGenerators.ColumnExpression[],System.String)">
            <summary>
            Every property accessed in the list of columns must be adjusted for a new scope
            </summary>
        </member>
        <member name="M:Npgsql.SqlGenerators.SqlBaseGenerator.DateAdd(System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
            <summary>
            PostgreSQL has no direct functions to implements DateTime canonical functions
            http://msdn.microsoft.com/en-us/library/bb738626.aspx
            http://msdn.microsoft.com/en-us/library/bb738626.aspx
            but we can use workaround:
            expression + number * INTERVAL '1 number_type'
            where number_type is the number type (days, years and etc)
            </summary>
            <param name="functionName">
            </param>
            <param name="args">
            </param>
            <returns>
            </returns>
        </member>
    </members>
</doc>
